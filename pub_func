#!/bin/bash
# ---------------------------------- ------------- +
# file: pub_func 程序公用方法
# ------------------------------------------------ +
# @todo 提供公用方法
# @abstract 
# @author CMS.wangcun 
# @mail 1541231755@qq.com
# @date	2015/03/16 - 03/20
# @version 2.2 
# @useage: . ./pub_func
# ------------------------------------------------ +

IS_DEBUG=0; 
TASK_MAX_THREAD=2; #max thread of one task
TASK_MAX_NUM=2; #max of the task list
CONFIG_NAME="./config"; #config file path of task 
CONFIG_TASK_PATH="./task/"; #task more config path
CONFIG_LOG_PATH="./runtime/"; #log file save path
CONFIG_PIPE_PATH="./pipe/";
CONFIG_CORE_SCRIPT="task.sh";
HANDLE_FLAG=1;

#initliaze AND set default value
script_type=0;
script_path=0;
script_start=0;
script_end=0;
script_step=1;
script_thread=2

function log_it()
{
	local now="`date +'%Y-%m-%d %H:%M:%S'`";
	local logName="`date +'%Y%m%d'`-run.log";
	echo -e "${now}\t${1}" >>  "${CONFIG_LOG_PATH}${logName}";
}

function getInterpreter()
{
	local interPreter="";
	case "$1" in
		php)
			interPreter="/opt/php5/bin/php";	
		;;

		shell)
			interPreter="/bin/bash";	
		;;
	esac
	throw "$interPreter";
}

function debug()
{
	echo -e "\033[31;31merror: [@ Line $LINENO] Error: Command or function exited width status $?!\033[0m";
}
function killAll()
{
	/bin/rm "${CONFIG_PIPE_PATH}*";
	/bin/ps ajx | grep "${CONFIG_CORE_SCRIPT}" | 
								  grep -v grep | 
							  awk '{print $2}' | 
					while read subThread; 
					do 	
						echo "will kill the thread :${subThread}"; 
						killTask $subThread
					done;
	throw "All the Task is Stop!";
}

function killTask ()
{
	/bin/kill -9 $1;	
}

function iexit ()
{
	exit -1;
}

function throwANDexit()
{
	echo -e "$1";
	exit -1;
}

function throw ()
{
	echo  "${1}";
}

function getPipeByTask ()
{
	local task_pipe;
	task_pipe="${CONFIG_PIPE_PATH}${1}.fifo";
	createPipe "${task_pipe}";
	throw ${task_pipe};
}

function createPipe()
{
	if [ ! -e "${1}" ]; then
		mkfifo "${1}";
		log_it "[log] ${1} is create success!";
	else
		log_it "[log] ${1} is exists!";
	fi
}
