#!/bin/bash
# ---------------------------------- ------------- +
# file: pub_func 
# ------------------------------------------------ +
# @author <github.com/cunwang>
# @date	2015/03/16 - 03/20
# @edit date	2018/08/17
# @version 2.3 
# ------------------------------------------------ +

:<<!
Debug Model, To be extended
!
IS_DEBUG=0; 

:<<!
Max thread , 
If Thread nums bigger than the Max Thread will be ignore. 
!
TASK_MAX_THREAD=2;

:<<!
Number of tasks supported at the same time.
According to the actual situation of rational allocation, default 2.
!
TASK_MAX_NUM=2;

:<<!
Default Config Path.
!
PHP_BIN_PATH="/opt/php5/bin/php";
SHELL_BIN_PATH="/bin/bash";
CONFIG_NAME="./config";
CONFIG_TASK_PATH="./task/";
CONFIG_LOG_PATH="./runtime/";
CONFIG_PIPE_PATH="./pipe/";
CONFIG_CORE_SCRIPT="task.sh";
HANDLE_FLAG=1;

:<<!
Variable initialization.
!
script_type=0;
script_path=0;
script_start=0;
script_end=0;
script_step=1;
script_thread=2

:<<!
[Function] 
@abstract, Recorded String to file
@params, $1 String
@usage
	> log_it "record something."
!
function log_it()
{
	if [ $IS_DEBUG -eq 1 ]; then
		local now="`date +'%Y-%m-%d %H:%M:%S'`";
		local logName="`date +'%Y%m%d'`-run.log";
		echo -e "${now}\t${1}" >>  "${CONFIG_LOG_PATH}${logName}";
	fi
}

function getInterpreter()
{
	local interPreter="";
	case "$1" in
		php)
			interPreter=${PHP_BIN_PATH};
		;;

		shell)
			interPreter=${SHELL_BIN_PATH};
		;;
	esac
	throw "${interPreter}";
}

function debug()
{
	log_it "\033[31;31merror: [@ Line $LINENO] Error: Command or function exited width status $?!\033[0m";
}

function killAll()
{
	/bin/rm "${CONFIG_PIPE_PATH}*";
	/bin/ps ajx | 
		grep "${CONFIG_CORE_SCRIPT}" | 
			grep -v grep | 
				awk '{print $2}' | 
					while read subThread; 
					do 	
						echo "will kill the thread :${subThread}"; 
						killTask $subThread
					done;
	throw "All the Task is Stop!";
}

function killTask ()
{
	/bin/kill -9 $1;	
}

function iexit ()
{
	exit -1;
}

function throwANDexit()
{
	echo -e "$1";
	exit -1;
}

function throw ()
{
	echo  "${1}";
}

function getPipeByTask ()
{
	local task_pipe;
	task_pipe="${CONFIG_PIPE_PATH}${1}.fifo";
	createPipe "${task_pipe}";
	throw ${task_pipe};
}

function createPipe()
{
	if [ ! -e "${1}" ]; then
		mkfifo "${1}";
		log_it "[log] ${1} is create success!";
	else
		log_it "[log] ${1} is exists!";
	fi
}
